import torch
from PIL import Image
from code.config import Config
from code.generator import Generator
config = Config()
from torchvision import transforms
transform = transforms.Compose([
    transforms.PILToTensor()
])
import streamlit as st
st.markdown(
'''
# Hellooooo !! 
### Welcome to my application for generating images in Vang Gogf Style
'''
)


columns = st.columns(2)
with columns[0]:
    with st.container(border=True):
        option = st.selectbox(
            label='\t',
            options =['select an option','camera','file upload']
            )
        input_photo = None
        match option:
            case 'select an option': st.markdown(' I wonder, which method would you like to use to upload images ðŸ¤”?')
            case 'camera': 
                st.markdown('#### Say cheeseeeeeeee... âœŒ')
                input_photo = st.camera_input(label='\t')
            case 'file upload': 
                st.markdown('Please Upload your image in png, jpeg, or jpg format ðŸ˜Š')
                input_photo = st.file_uploader(label='\t', type=['png','jpg','jpeg'])
        if input_photo is not None:
            st.session_state.input_photo = config.preprocess(Image.open(input_photo).convert('RGB'))
            st.write('the image taken as input is, please check how it looks ')
            st.image((transform(Image.open(input_photo).convert('RGB'))).permute(1,2,0).numpy(),clamp=True)
with columns[1]:
    with st.container(border=True):
        if st.button(label='Generate Photo'):
            if "input_photo" in st.session_state:
                with st.status(label="loading models...", expanded=True):
                    generator = Generator(3)
                    checkpoint = torch.load('VangGoghGAN/checkpoints/gen_VangGogh.pth', map_location=torch.device('cpu'))
                    generator.load_state_dict(checkpoint["model"])
                    'All Keys Matched'
                with st.status(label='Generating Photo...', expanded=True):
                    output = generator(st.session_state.input_photo)
                    st.write('##### This is the photo generated by our model in Van Gogh\'s style ðŸ˜ŠðŸ˜Š')
                    st.image((output*0.5+0.5).permute(1,2,0).detach().numpy(),clamp=True)
            else:
                st.error(
                '''
                ### Please upload an image
                '''
                )